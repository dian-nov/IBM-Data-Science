{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dian-nov/IBM-Data-Science/blob/main/spacex_interactive_visualization_plotly_dash_(code)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ab3a0c00-9d93-4450-9b28-ec57f226df99"
      },
      "source": [
        "<p style=\"text-align:center\">\n",
        "    <a href=\"https://skills.network\" target=\"_blank\">\n",
        "    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png\" width=\"200\" alt=\"Skills Network Logo\">\n",
        "    </a>\n",
        "</p>\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "104f92a7-66e6-4de7-980d-cd5b5d98dbe7"
      },
      "source": [
        "# **Hands-on Lab: Build an Interactive Dashboard with Ploty Dash**\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fa561905-3ff5-43cb-85db-e09f95908127"
      },
      "source": [
        "In this lab, you will be building a Plotly Dash application for users to perform interactive visual analytics on SpaceX launch data in\n",
        "real-time.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f7b3bbb8-8644-4e72-8724-0149b37d04c0"
      },
      "source": [
        "This dashboard application contains input components such as a dropdown list and a range slider to interact with a pie chart and a scatter point chart. You will be guided to build this dashboard application via the following tasks:\n",
        "\n",
        "*   TASK 1: Add a Launch Site Drop-down Input Component\n",
        "*   TASK 2: Add a callback function to render `success-pie-chart` based on selected site dropdown\n",
        "*   TASK 3: Add a Range Slider to Select Payload\n",
        "*   TASK 4: Add a callback function to render the `success-payload-scatter-chart` scatter plot"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f8ece203-b746-4247-b936-8aa610628e17"
      },
      "source": [
        "Let's first import required Python packages for this lab:\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import required libraries\n",
        "import pandas as pd\n",
        "import dash\n",
        "from dash import html\n",
        "from dash import dcc\n",
        "from dash.dependencies import Input, Output\n",
        "import plotly.express as px"
      ],
      "metadata": {
        "id": "9OkKIpleJEN5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Read the airline data into pandas dataframe\n",
        "spacex_df = pd.read_csv(\"spacex_launch_dash.csv\")\n",
        "max_payload = spacex_df['Payload Mass (kg)'].max()\n",
        "min_payload = spacex_df['Payload Mass (kg)'].min()"
      ],
      "metadata": {
        "id": "w3RkGn5o9wc8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a dash application\n",
        "app = dash.Dash(__name__)"
      ],
      "metadata": {
        "id": "vn-YTDzM9x71"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#A) Create an app layout"
      ],
      "metadata": {
        "id": "1bh2gIQK-8LW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',\n",
        "                                        style={'textAlign': 'center', 'color': '#503D36',\n",
        "                                               'font-size': 40}),"
      ],
      "metadata": {
        "id": "xN3aK2h294YH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## TASK 1: Add a dropdown list to enable Launch Site selection"
      ],
      "metadata": {
        "id": "EUvx7f6O963H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# The default select value is for ALL sites\n",
        "# dcc.Dropdown(id='site-dropdown',...)\n",
        "dcc.Dropdown(id='site-dropdown',\n",
        "       options=[\n",
        "           {'label': 'All Sites', 'value': 'ALL'},\n",
        "           {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},\n",
        "           {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},\n",
        "           {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},\n",
        "           {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'},\n",
        "                                                ],\n",
        "     value='ALL',\n",
        "     placeholder=\"Select a Launch Site here\",\n",
        "       searchable=True),\n",
        "html.Br(),"
      ],
      "metadata": {
        "id": "ZH4Ub2rt95az"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## TASK 2: Add a pie chart to show the total successful launches count for all sites"
      ],
      "metadata": {
        "id": "OGKgf1Q0-TMF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        " # If a specific launch site was selected, show the Success vs. Failed counts for the site\n",
        "html.Div(dcc.Graph(id='success-pie-chart')),\n",
        "html.Br(),\n",
        "\n",
        "html.P(\"Payload range (Kg):\"),"
      ],
      "metadata": {
        "id": "4Xqy3OqZ95Sx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## TASK 3: Add a slider to select payload range"
      ],
      "metadata": {
        "id": "WOH7kAgJ-baC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#dcc.RangeSlider(id='payload-slider',...)\n",
        "dcc.RangeSlider(id='payload-slider',\n",
        "                min=0,max=10000,step=1000,\n",
        "                value=[min_payload,max_payload],\n",
        "                marks={0: '0', 2500:'2500',5000:'5000',\n",
        "                7500:'7500', 10000: '10000'}),"
      ],
      "metadata": {
        "id": "fwWAs9qV95LI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## TASK 4: Add a scatter chart to show the correlation between payload and launch success"
      ],
      "metadata": {
        "id": "EstU5mnH-v1B"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "html.Div(dcc.Graph(id='success-payload-scatter-chart')),\n",
        "])"
      ],
      "metadata": {
        "id": "l17uo-u2-ykt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# B) Add a callback to the *components*"
      ],
      "metadata": {
        "id": "aYKlSD7G_EcW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## TASK 1: Add a callback function for the dropdown"
      ],
      "metadata": {
        "id": "grRQy8ge_jhq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Add a callback function for site-dropdown as input, bold textsuccess-pie-chart as output\n",
        "@app.callback(Output(component_id='success-pie-chart', component_property='figure'),\n",
        "              Input(component_id='site-dropdown', component_property='value'))\n",
        "\n",
        "def get_pie_chart(site_dropdown):\n",
        "    filtered_df = spacex_df\n",
        "    if site_dropdown=='ALL':\n",
        "        fig=px.pie(data_frame=spacex_df,\n",
        "        names='Launch Site',\n",
        "        values='class',\n",
        "        title='Total Launches for All Sites')\n",
        "        return fig\n",
        "    else:\n",
        "        #specific_df=spacex_df['Launch Site']\n",
        "        specific_df=spacex_df.loc[spacex_df['Launch Site']==site_dropdown]\n",
        "        fig=px.pie(data_frame=specific_df,\n",
        "        names='class',\n",
        "        title='Total Launch for a Specific Site')\n",
        "        return fig"
      ],
      "metadata": {
        "id": "Lp9lCRY9_EDa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## TASK 2: Add a callback function for the chart"
      ],
      "metadata": {
        "id": "kWu15HEo_ray"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output\n",
        "@app.callback(Output(component_id='success-payload-scatter-chart', component_property='figure'),\n",
        "             [Input(component_id='site-dropdown', component_property='value'),\n",
        "              Input(component_id='payload-slider', component_property='value')])\n",
        "\n",
        "def update_graph(site_dropdown, payload_slider):\n",
        "    if site_dropdown=='ALL':\n",
        "        filtered_data=spacex_df[(spacex_df['Payload Mass (kg)']>=payload_slider[0])\n",
        "        &(spacex_df['Payload Mass (kg)']<=payload_slider[1])]\n",
        "        scatterplot=px.scatter(data_frame=filtered_data, x=\"Payload Mass (kg)\", y=\"class\",\n",
        "        color=\"Booster Version Category\")\n",
        "        return scatterplot\n",
        "    else:\n",
        "        specific_df=spacex_df.loc[spacex_df['Launch Site']==site_dropdown]\n",
        "        filtered_data=specific_df[(specific_df['Payload Mass (kg)']>=payload_slider[0])\n",
        "        &(spacex_df['Payload Mass (kg)']<=payload_slider[1])]\n",
        "        scatterplot=px.scatter(data_frame=filtered_data, x=\"Payload Mass (kg)\", y=\"class\",\n",
        "        color=\"Booster Version Category\")\n",
        "        return scatterplot"
      ],
      "metadata": {
        "id": "bmSZDrUX_C7n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "dG1eT5hY_Clc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Run the app\n",
        "if __name__ == '__main__':\n",
        "    app.run_server(debug=True, port=2810)"
      ],
      "metadata": {
        "id": "A_mTFefT_CNy"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3 (ipykernel)",
      "language": "python"
    },
    "language_info": {
      "name": "python",
      "version": "3.11.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "prev_pub_hash": "55c216115ef3c9956bad93ab387b1d19bb068a77c9a7682441bce33021bf54e8",
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}